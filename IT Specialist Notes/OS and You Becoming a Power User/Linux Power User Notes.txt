LINUX POWER USER NOTES:

You can check out the contents of the current directory using the ls command.

You can view more details about the files, like ownership and permissions, by adding the flag -l to the ls command.

You can see hidden files in the current directory by passing flag a the ls command.

You can find out where you are in relation to the rest of the file system using the pwd command.

You can navigate to different directories using the cd command

You can check out the contents of a file using the cat command.

For large input files, the less commands allows movement within the files. The syntax is similar to that of the cat command, but you can move.

Directories (folders) in Linux are created using the mkdir command. The command takes the directory name as the argument. mkdir dir1 dir2 dir3
-p: allow mkdir to create parent directories if they don't exist
-m: (mode) used to set permissions of directories during creation
-v: run command in verbose mode

To remove empty directories, use the rmdir command. The name of the directory to be removed is passed as an argument. rmdir dir1 dir2 dir3 dir4
rmdir takes only one option, which tells it to remove parent directories if they're also empty.
-p: remove parent directories, if they're also empty

By default, the touch command is used to change the modification and access times of a file. If the file doesn't exist, the touch command is used to create a file with default permissions. touch empty_file
-c: do not create file if it doesn't exist

Copy the file "source_file" in the directory /home/user/ to the directory "duplicates" as "target_file". cp /home/user/source_file /home/user/duplicates/target_file

Move the file "source_file" in /home/user/ to the directory "moved_files" and give it the name "target_name". mv /home/user/source_file /home/user/moved_files/target_file

We can remove the duplicate file we created in the directory "duplicates" using rm. rm /home/user/duplicates/target_file

You can also use a "dot" to copy or move files to the current directory. mv /home/user/Images/Vacation.JPG .

To remove a directory with content, the rm command is used instead of rmdir. The option -r tells the command to remove the directory, along with its content recursively. rm -r non_empty_dir

grep is a super powerful Linux command used to search through files for the occurrence of a string of characters that matches a specified pattern. -r: search recursively
-w: match the whole word
-n: only in line number
-e: match pattern
--exclude and --exclude: include and exclude files in the search
--exclude-dir and --include-dir: include or exclude directories in the search
In the directory /home/user/Downloads of your virtual machine, a number of files exist. We'll find the files that have the word "vacation" in them, and move them to /home/user/Documents. grep -rw /home/user/Downloads -e "vacation"

Move the directories that match into the target directory. mv /home/user/Downloads/Iceland /home/user/Downloads/Japan /home/user/Documents



---Create, Modify, and Remove File and Folder Permissions in Linux---

Before you can even begin changing the permission of a file or folder, you need to first check the permissions of the specific file/folder. To display ownership and permissions for a file, you can use ls with the -l flag and the name of the file you're interested in: ls -l [FILENAME]
There's a file named "important_document" on your machine in the "/home/qwiklab/documents" directory. You can change to this directory from your current one using this command: cd ../qwiklab/documents
Check out its current permissions with this command, and take a look at the output below: ls -l important_document

Now, change the permissions of "important_document" (from the previous step) so that the owner has execute permissions on top of their current permissions. To do this, you'll use the chmod command, with the argument 700. The two zeros keep everyone, but the owner, from having any permissions at all, and the seven grants all available permissions to the owner (including execute). Keep in mind that because the file is owned by "root" you'll need to use sudo: sudo chmod 700 important_document
If you use ls to check the permissions, you'll now see that the execution permission has been added: ls -l important_document

Changing folder permissions. In this directory there's a folder called "secret_folder". View its current permissions using ls, this time with the -ld flag rather than -l because you're viewing a directory instead of a normal file: ls -ld secret_folder/
When using chmod on a directory, files within that directory are not affected. While this isn't relevant to this specific lab, it's important to remember.

Previously, we used a numerical argument to set the permissions for a file. If you want to avoid figuring out the number that matches the permission levels, you can use an alternate syntax. To satisfy the first condition, you only need to add the execute permission to the owner, since they already have read and write permissions. To add execute to the owner's permissions, you can use the command below. (Note that "u" stands for "user" and "x" stands for "execute".) sudo chmod u+x secret_folder/,
ls -ld secret_folder/

Now you can fix the group's permission. They currently have read permission and don't have write permission, which you can fix with two similar commands. These can be done in either order; "g" stands for "group" (like "u" from before), and "w" and "r" stand for "write" and "read" respectively: sudo chmod g+w secret_folder/, sudo chmod g-r secret_folder/, ls -ld secret_folder/

Finally, you can remove read permissions from everyone else using the command below ("o" stands for "other"): sudo chmod o-r secret_folder/, ls -ld secret_folder/

Using chmod this way is easier to remember, but takes lots more commands. All the previous steps could also have been done using the numerical notation, like this: sudo chmod 720 secret_folder/

Now you'll change the owner of a file. In your current directory, there's a folder called "taco". Use ls to examine its permissions and see who the owner of the file is: ls -ld taco/
You can see from this that the root user currently owns this file. There's another user account on the machine called "cook". Go ahead and make "cook" the owner of the file, using the chown command like this: sudo chown cook /home/qwiklab/taco, ls -ld taco/

To give the owner execution permissions, you can use the same command from earlier: sudo chmod u+x not_so_important_document, ls -l not_so_important_document
The group already has read permissions, so all you need to do is add write permissions: sudo chmod g+w not_so_important_document, ls -l not_so_important_document

Finally, you need to give everyone else read permissions. You can use the "o+r" argument to add read permissions to people other than the owner or group, but you can also use "a+r". This adds read permission to everyone (owner, group, and other). Because the owner and the group already have read permissions, this will only change the permissions for everyone else, but the end result is the same: sudo chmod a+r not_so_important_document, ls -l not_so_important_document

Again, you can accomplish the same result using a numerical argument to set the permissions, rather than incrementally changing them. Here's the command that meets all three criteria at once: sudo chmod 764 not_so_important_document

Adding multiple permissions at once - ls -l public_document
For this file, you want everyone (owner, group, and anyone else) to have all permissions. You can add read, write, and execute permissions to everyone at once using this command: sudo chmod a+rwx public_document, ls -l public_document
Using the numeric argument form of chmod, this same result could be accomplished with this command: sudo chmod 777 public_document



---Software Packages and File Archives on Linux---

First, use dpkg to install a text editor, called Atom. A .deb file is located at "/home/qwiklab/downloads/atom-amd64.deb", which you can install using this command: sudo dpkg -i /home/qwiklab/downloads/atom-amd64.deb, apt to fix the missing dependencies: sudo apt install -f, Now Atom is successfully installed, which you can verify using dpkg: dpkg -s atom

Update and upgrade / install VLC: sudo apt-get update && sudo apt-get install vlc

Extracting an archive: cd /home/qwiklab/downloads, sudo tar -xvf extract_me.tar

Archiving files: cd ~,  tar to archive them into the file "Planets.tar": tar -cvf Planets.tar /home/qwiklab/documents/Earth /home/qwiklab/documents/Mercury /home/qwiklab/documents/Venus

Installing 7-Zip: sudo apt install p7zip-full, You can verify the installation using dpkg, with this command: dpkg -s p7zip-full

Uninstalling GIMP: sudo apt remove gimp, Verify: dpkg -s gimp



---Partition and Format a Disk Drive in Linux---

View block devices and file systems attached to your system: lsblk
View disks mounted on the system using the df command. Use the -h option to display file sizes in human readable format: df -h

You can display partition information using the fdisk command. You can also use the -l option to list partitions in the block. You can pass a device name to the fdisk command to list the partitions contained in that device. To list all partitions, use fdisk -l: sudo fdisk -l, To list partitions contained in /dev/sda, pass /dev/sda to the fdisk command: sudo fdisk -l /dev/sda
Start fdisk by passing the disk you want to partition as the parameter: sudo fdisk /dev/[DRIVE], Open fdisk in interactive mode to do the partitioning: sudo fdisk /dev/[DRIVE]

Formatting partitions using mkfs: lsblk, Format the partition in your unmounted drive to ext4 using this command: sudo mkfs -t ext4 /dev/[DRIVE]2
You can now mount /dev/sdb2 to a location on the file system to start accessing files on it. Mount it on the directory "/home/my_drive": sudo mount /dev/[SECOND DRIVE]2 /home/my_drive




---Maintaining Efficient Process Utilization on Linux---

Terminating a specific process. The ps -aux command allows you to list all currently running processes on a Linux machine. To filter the processes you're interested in, you can pipe the output of ps through grep: ps -aux | grep "totally_not_malicious", To stop a process, you can use the kill command: sudo kill [PROCESS ID], Verify: ps -aux | grep "totally_not_malicious"






